//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace RSSFeedService
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(CATEGORY))]
    [KnownType(typeof(ITEM))]
    [KnownType(typeof(USER))]
    public partial class FEED: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public long feed_id
        {
            get { return _feed_id; }
            set
            {
                if (_feed_id != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'feed_id' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _feed_id = value;
                    OnPropertyChanged("feed_id");
                }
            }
        }
        private long _feed_id;
    
        [DataMember]
        public string feed_title
        {
            get { return _feed_title; }
            set
            {
                if (_feed_title != value)
                {
                    _feed_title = value;
                    OnPropertyChanged("feed_title");
                }
            }
        }
        private string _feed_title;
    
        [DataMember]
        public string feed_address
        {
            get { return _feed_address; }
            set
            {
                if (_feed_address != value)
                {
                    _feed_address = value;
                    OnPropertyChanged("feed_address");
                }
            }
        }
        private string _feed_address;
    
        [DataMember]
        public string feed_link
        {
            get { return _feed_link; }
            set
            {
                if (_feed_link != value)
                {
                    _feed_link = value;
                    OnPropertyChanged("feed_link");
                }
            }
        }
        private string _feed_link;
    
        [DataMember]
        public string feed_description
        {
            get { return _feed_description; }
            set
            {
                if (_feed_description != value)
                {
                    _feed_description = value;
                    OnPropertyChanged("feed_description");
                }
            }
        }
        private string _feed_description;
    
        [DataMember]
        public Nullable<long> category_id
        {
            get { return _category_id; }
            set
            {
                if (_category_id != value)
                {
                    ChangeTracker.RecordOriginalValue("category_id", _category_id);
                    if (!IsDeserializing)
                    {
                        if (CATEGORY != null && CATEGORY.category_id != value)
                        {
                            CATEGORY = null;
                        }
                    }
                    _category_id = value;
                    OnPropertyChanged("category_id");
                }
            }
        }
        private Nullable<long> _category_id;

        #endregion
        #region Navigation Properties
    
        [DataMember]
        public CATEGORY CATEGORY
        {
            get { return _cATEGORY; }
            set
            {
                if (!ReferenceEquals(_cATEGORY, value))
                {
                    var previousValue = _cATEGORY;
                    _cATEGORY = value;
                    FixupCATEGORY(previousValue);
                    OnNavigationPropertyChanged("CATEGORY");
                }
            }
        }
        private CATEGORY _cATEGORY;
    
        [DataMember]
        public TrackableCollection<ITEM> ITEM
        {
            get
            {
                if (_iTEM == null)
                {
                    _iTEM = new TrackableCollection<ITEM>();
                    _iTEM.CollectionChanged += FixupITEM;
                }
                return _iTEM;
            }
            set
            {
                if (!ReferenceEquals(_iTEM, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_iTEM != null)
                    {
                        _iTEM.CollectionChanged -= FixupITEM;
                    }
                    _iTEM = value;
                    if (_iTEM != null)
                    {
                        _iTEM.CollectionChanged += FixupITEM;
                    }
                    OnNavigationPropertyChanged("ITEM");
                }
            }
        }
        private TrackableCollection<ITEM> _iTEM;
    
        [DataMember]
        public TrackableCollection<USER> USER
        {
            get
            {
                if (_uSER == null)
                {
                    _uSER = new TrackableCollection<USER>();
                    _uSER.CollectionChanged += FixupUSER;
                }
                return _uSER;
            }
            set
            {
                if (!ReferenceEquals(_uSER, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_uSER != null)
                    {
                        _uSER.CollectionChanged -= FixupUSER;
                    }
                    _uSER = value;
                    if (_uSER != null)
                    {
                        _uSER.CollectionChanged += FixupUSER;
                    }
                    OnNavigationPropertyChanged("USER");
                }
            }
        }
        private TrackableCollection<USER> _uSER;

        #endregion
        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            CATEGORY = null;
            ITEM.Clear();
            USER.Clear();
        }

        #endregion
        #region Association Fixup
    
        private void FixupCATEGORY(CATEGORY previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.FEED.Contains(this))
            {
                previousValue.FEED.Remove(this);
            }
    
            if (CATEGORY != null)
            {
                if (!CATEGORY.FEED.Contains(this))
                {
                    CATEGORY.FEED.Add(this);
                }
    
                category_id = CATEGORY.category_id;
            }
            else if (!skipKeys)
            {
                category_id = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("CATEGORY")
                    && (ChangeTracker.OriginalValues["CATEGORY"] == CATEGORY))
                {
                    ChangeTracker.OriginalValues.Remove("CATEGORY");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("CATEGORY", previousValue);
                }
                if (CATEGORY != null && !CATEGORY.ChangeTracker.ChangeTrackingEnabled)
                {
                    CATEGORY.StartTracking();
                }
            }
        }
    
        private void FixupITEM(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (ITEM item in e.NewItems)
                {
                    item.FEED = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("ITEM", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (ITEM item in e.OldItems)
                {
                    if (ReferenceEquals(item.FEED, this))
                    {
                        item.FEED = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("ITEM", item);
                    }
                }
            }
        }
    
        private void FixupUSER(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (USER item in e.NewItems)
                {
                    if (!item.FEED.Contains(this))
                    {
                        item.FEED.Add(this);
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("USER", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (USER item in e.OldItems)
                {
                    if (item.FEED.Contains(this))
                    {
                        item.FEED.Remove(this);
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("USER", item);
                    }
                }
            }
        }

        #endregion
    }
}
